// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PuddleStoreClient is the client API for PuddleStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuddleStoreClient interface {
	Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientID, error)
	Exit(ctx context.Context, in *ClientID, opts ...grpc.CallOption) (*Success, error)
	Open(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*Success, error)
	Close(ctx context.Context, in *CloseMessage, opts ...grpc.CallOption) (*Success, error)
	Write(ctx context.Context, in *WriteMessage, opts ...grpc.CallOption) (*Success, error)
	Read(ctx context.Context, in *ReadMessage, opts ...grpc.CallOption) (*ReadResponse, error)
	Mkdir(ctx context.Context, in *MkdirMessage, opts ...grpc.CallOption) (*Success, error)
	Remove(ctx context.Context, in *RemoveMessage, opts ...grpc.CallOption) (*Success, error)
	List(ctx context.Context, in *ListMessage, opts ...grpc.CallOption) (*ListResponse, error)
}

type puddleStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewPuddleStoreClient(cc grpc.ClientConnInterface) PuddleStoreClient {
	return &puddleStoreClient{cc}
}

func (c *puddleStoreClient) Connect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientID, error) {
	out := new(ClientID)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Exit(ctx context.Context, in *ClientID, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Exit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Open(ctx context.Context, in *OpenMessage, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Close(ctx context.Context, in *CloseMessage, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Write(ctx context.Context, in *WriteMessage, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Read(ctx context.Context, in *ReadMessage, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Mkdir(ctx context.Context, in *MkdirMessage, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Mkdir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) Remove(ctx context.Context, in *RemoveMessage, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puddleStoreClient) List(ctx context.Context, in *ListMessage, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/pkg.PuddleStore/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuddleStoreServer is the server API for PuddleStore service.
// All implementations must embed UnimplementedPuddleStoreServer
// for forward compatibility
type PuddleStoreServer interface {
	Connect(context.Context, *Empty) (*ClientID, error)
	Exit(context.Context, *ClientID) (*Success, error)
	Open(context.Context, *OpenMessage) (*Success, error)
	Close(context.Context, *CloseMessage) (*Success, error)
	Write(context.Context, *WriteMessage) (*Success, error)
	Read(context.Context, *ReadMessage) (*ReadResponse, error)
	Mkdir(context.Context, *MkdirMessage) (*Success, error)
	Remove(context.Context, *RemoveMessage) (*Success, error)
	List(context.Context, *ListMessage) (*ListResponse, error)
	mustEmbedUnimplementedPuddleStoreServer()
}

// UnimplementedPuddleStoreServer must be embedded to have forward compatible implementations.
type UnimplementedPuddleStoreServer struct {
}

func (UnimplementedPuddleStoreServer) Connect(context.Context, *Empty) (*ClientID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPuddleStoreServer) Exit(context.Context, *ClientID) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exit not implemented")
}
func (UnimplementedPuddleStoreServer) Open(context.Context, *OpenMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedPuddleStoreServer) Close(context.Context, *CloseMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedPuddleStoreServer) Write(context.Context, *WriteMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedPuddleStoreServer) Read(context.Context, *ReadMessage) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPuddleStoreServer) Mkdir(context.Context, *MkdirMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedPuddleStoreServer) Remove(context.Context, *RemoveMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedPuddleStoreServer) List(context.Context, *ListMessage) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPuddleStoreServer) mustEmbedUnimplementedPuddleStoreServer() {}

// UnsafePuddleStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuddleStoreServer will
// result in compilation errors.
type UnsafePuddleStoreServer interface {
	mustEmbedUnimplementedPuddleStoreServer()
}

func RegisterPuddleStoreServer(s grpc.ServiceRegistrar, srv PuddleStoreServer) {
	s.RegisterService(&PuddleStore_ServiceDesc, srv)
}

func _PuddleStore_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Connect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Exit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Exit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Exit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Exit(ctx, req.(*ClientID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Open(ctx, req.(*OpenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Close(ctx, req.(*CloseMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Write(ctx, req.(*WriteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Read(ctx, req.(*ReadMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkdirMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Mkdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Mkdir(ctx, req.(*MkdirMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).Remove(ctx, req.(*RemoveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PuddleStore_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuddleStoreServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.PuddleStore/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuddleStoreServer).List(ctx, req.(*ListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PuddleStore_ServiceDesc is the grpc.ServiceDesc for PuddleStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PuddleStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.PuddleStore",
	HandlerType: (*PuddleStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _PuddleStore_Connect_Handler,
		},
		{
			MethodName: "Exit",
			Handler:    _PuddleStore_Exit_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _PuddleStore_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _PuddleStore_Close_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _PuddleStore_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _PuddleStore_Read_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _PuddleStore_Mkdir_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _PuddleStore_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PuddleStore_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/puddlestore.proto",
}
